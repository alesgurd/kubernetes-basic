Kubernetes
28 May 2019
Tags: Kubernetes, Docker

* Temas
- Ambiente
- Conceptos basicos (Pods, Controladores, Ingress)
- Hands-on workshop

* Ambiente
- Ingresemos al servidor mediante:
    ssh <usuario>@kops-dev.chattigo.com
- Creemos un directorio para el trabajo individual.
    mkdir <su nombre>
- Entremos al directorio donde trabajaremos y continuemos
    cd <su nombre>

* Conceptos basicos
* Kubernetes

Es un orquestador de contenedores Docker desarrollado en GO. Fue incubado inicialmente por Google y luego paso a ser un proyecto Open Source y un miembro importante de la CNCF (Cloud Native Computing Foundation).

.image images/go-k8s.png _ 300

* Kubernetes

Al trabajar con Kubernetes pasamos a traves de un cambio de paradigma, ya que dejamos de administrar la configuracion de un servidor o de maquinas virtuales y empezamos a trabajar con estado. Los archivos de configuracion de Kubernetes representan los objetos Kubernetes el estado deseado de cada uno de ellos para nuestro despliegue. Es alli donde se definen los recursos destinados para un deployment, la estrategia de despliegue, contraseñas de registros Docker, entre muchas otras posibles adiciones.

* Conceptos basicos

- Pod: Unidad minima de Kubernetes, un pod puede manejar uno o mas contenedores y a su vez es parte de un deployment.
- ReplicaSet: Recurso de Kubernetes que se encarga de mantener el numero minimo de instancias de un despliegue particular.
- DaemonSet: Despliegue en el cual Kubernetes se encarga de orquestar al menos una instancia por nodo.
- Deployment: Tipo de despliegue mas utilizado, es una abstraccion sobre los pods y ReplicaSets, en un deployment estan definidos valores relativos a los pods y numero de replicas.
- Service: Dado que la naturaleza efimera de los pods, nos encontramos con la limitante de la comunicacion entre cada uno de estos pequeños componentes. Los servicios nos abstraen de este problema, facilitando la comunicacion entre ellos mediante la agrupacion logica de pods detras de un unico nombre.
- Ingress: Conjunto de reglas que permiten el trafico entrante hacia servicios internos del cluster.

* Pasando a la practica...

* Workshop

Desplegaremos el administrador, junto con su servicio y una regla ingress para exponerlo al exterior.

* Workshop
- Primero que nada, necesitamos conectarnos al registro Docker. Esto lo podemos hacer mediante el comando: 
    docker login -u <usuario> https://nexus.chattigo.com:49443
- Clonemos los proyectos, los enlaces serian: https://bitbucket.org/chattigodev/guiadmin (RELEASE/v2.2.0) 
- Hagamos build de la imagen del proyecto. Esto pueden hacerlo mediante el comando:
    docker build -t nexus.chattigo.com:49443/guiadmin:<su nombre> .
- Luego subimos al registro en el Nexus:
    docker push nexus.chattigo.com:49443/guiadmin:<su nombre>

* Workshop
- Despleguemos el secreto para las credenciales al nexus:
    kubectl create secret docker-registry nexus --docker-server=https://nexus.chattigo.com:49443 --docker-username=k8s-user --docker-password=n3xusr3p0! --docker-email=mroldan@chattigo.com -n <su nombre>
- En el directorio config encontraran los archivos de configuracion para los despliegues a realizar. Estos tienen placeholders, los cuales tendremos que modificar.
- Luego de realizar las modificaciones, crearemos un namespace con el comando: 
    kubectl create namespace <su nombre>
- Ahora, pasemos a aplicar la configuracion del administrador. Dentro del directorio config esta el archivo de configuracion, este cuenta con la especificacion del despliegue y el servicio para exponerlo.
    kubectl -n <su nombre> apply -f guiadmin.yml

* Workshop
- Esto habra creado un pod y un servicio, para listar los pods y servicios:
    kubectl -n <su nombre> get pods
    kubectl -n <su nombre> get services
- Despleguemos el secreto de nuestro certificado, creara el secreto TLS para nuestro despliegue.
    kubectl -n <su nombre> apply -f tls.yml
- Ahora pasemos a exponerlo mediante una regla ingress. Para esto necesito que modifiquemos el placeholder que les mostrare en pantalla con su nombre.
    kubectl -n <su nombre> apply -f guiadmin-ingress.yml
- Ahora podremos acceder al sitio mediante "https://kops-dev.chattigo.com/<su nombre>"/.

* Dudas | Comentarios
